/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Fri Feb 23 2018 11:40:01 GMT-0600 (Central Standard Time).
 */

define([
    'panels/AssetManager/CONSTANTS',
    'css!./styles/AssetManagerWidget.css'
], function (CONSTANTS) {
    'use strict';

    const WIDGET_CLASS = 'asset-manager';

    function AssetManagerWidget(logger, container) {
        this.logger = logger.fork('Widget');
        this.el = container;
        this._initialize();

        this.attrs = {};
        this.cycle = 0;

        this.logger.debug('ctor finished');
    }

    AssetManagerWidget.prototype._initialize = function () {
        var width = this.el.width(),
            height = this.el.height(),
            self = this;

        // set widget class
        this.el.addClass(WIDGET_CLASS);

        this.table = $('<table>');

        const header= $('<tr>');
        header.append('<th>', {text: 'Name', class: 'header-name'});
        header.append('<th>', {text: 'Desc', class: 'header-desc'});
        header.append('<th>', {text: 'Asset', class: 'header-asset'});
        header.append('<th>', {text: 'Delete', class: 'header-edit'});

        this.tableBody = $('<tbody>');

        this.table.append(header);
        this.table.append(this.tableBody);

        this.el.append(this.table);
    };

    AssetManagerWidget.prototype.onWidgetContainerResize = function (width, height) {
        this.logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    AssetManagerWidget.prototype.atNewAttributes = function (newAttrs) {
        this.el.empty();
        this.cycle += 1;

        newAttrs.forEach((attr) => {
            if (this.attrs.hasOwnProperty(attr.name)) {
                this.updateAttribute(attr);
            } else {
                this.addAttribute(attr);
            }
        });

        Object.keys(this.attrs).forEach((attrName) => {
            if (this.attrs[attrName].cycle !== this.cycle) {
                this.removeAttribute(attrName);
            }
        });

        this.applySortAndFilters();
    };

    AssetManagerWidget.prototype.addAttribute = function (attr) {
        const attrEl = $('<tr>');

        attrEl.append('<td>', {
            text: attr.name.substring(CONSTANTS.ATTR_PREFIX.length),
            class: 'row-name'
        });

        attrEl.append('<td>', {
            text: attr.desc.description,
            class: 'row-desc'
        });

        attrEl.append('<td>', {
            text: attr.value, // TODO: appened asset widget
            class: 'row-asset'
        });

        attrEl.append('<td>', {class: 'row-edit'}).append('<i>', {class: 'glyphicon glyphicon-trash'});

        this.tableBody.append(attrEl);

        this.attrs[attr.name] = {
            el: attrEl,
            value: attr.value,
            description: attr.desc.description,
            cycle: this.cycle,
        };
    };

    AssetManagerWidget.prototype.updateAttribute = function (attr) {
        const attrEl = this.attrs[attr.name].el;

        if (this.attrs[attr.name].value !== attr.value) {
            // TODO: Update asset-widget
            attrEl.find('.row-asset').text(attr.value);

            this.attrs[attr.name].value = attr.value;
        }

        if (this.attrs[attr.name].description !== attr.desc.description) {
            attrEl.find('.row-desc').text(attr.desc.description);

            this.attrs[attr.name].description = attr.desc.description;
        }

        this.attrs[attr.name].cycle = this.cycle;
    };

    AssetManagerWidget.prototype.removeAttribute = function (attrName) {
        this.attrs[attrName].el.remove();
        delete this.attrs[attrName];
    };

    AssetManagerWidget.prototype.applySortAndFilters = function () {

    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    AssetManagerWidget.prototype.destroy = function () {
    };

    AssetManagerWidget.prototype.onActivate = function () {
        this.logger.debug('AssetManagerWidget has been activated');
    };

    AssetManagerWidget.prototype.onDeactivate = function () {
        this.logger.debug('AssetManagerWidget has been deactivated');
    };

    return AssetManagerWidget;
});
