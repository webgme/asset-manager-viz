/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Fri Feb 23 2018 11:40:01 GMT-0600 (Central Standard Time).
 */

define([
    './Constants'
], function (
    CONSTANTS
) {

    'use strict';

    function AssetManagerControl(options) {
        this.logger = options.logger.fork('Control');

        this._client = options.client;
        const client = this._client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._attributes = [];
        this._attributesCompare = JSON.stringify(this._attributes);

        this._uiId = this._client.addUI(null, (events) => {
            const nodeObj = client.getNode(CONSTANTS.NODE_ID);
            let newAttributes = [];

            if (nodeObj) {
                newAttributes = nodeObj.getAttributeNames()
                    .filter(attrName => attrName.startsWith('am_'))
                    .sort()
                    .map((attrName) => {
                        return {
                            name: attrName,
                            value: nodeObj.getAttribute(attrName),
                            desc: nodeObj.getAttributeMeta(attrName)
                        }
                    });
            }

            // The widget takes care of only updating what changed..
            const newAttributesStr = JSON.stringify(newAttributes);

            if (this._attributesCompare !== newAttributesStr) {
                this._attributes = newAttributes;
                this._attributesCompare = newAttributesStr;
                this._widget.atNewAttributes(newAttributes);
            }
        });

        const territory = {};
        territory[CONSTANTS.NODE_ID] = {children: 0};

        client.updateTerritory(this._uiId, territory);
    }

    AssetManagerControl.prototype.onActivate = function () {
        this.logger.debug('AssetManagerWidget has been activated');
    };

    AssetManagerControl.prototype.onDeactivate = function () {
        this.logger.debug('AssetManagerWidget has been deactivated');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    AssetManagerControl.prototype.destroy = function () {
        this._client.removeUI(this._uiId);
    };

    return AssetManagerControl;
});
